GW Part 9
Let's apply the acquired knowledge of the DOM to our "Guess Who?" game.

Eliminated Class
In your CSS file, create a new class called eliminated that sets the opacity to 20%.
Try the class on one of the cards and check that the card becomes semi-transparent, then remove the class from your HTML. 
We will need this class later to mark the cards that have been eliminated from the game.



Click Event
Add a "click" event on one of the cards and make it trigger a toggleEliminated function.
In your JS file, create a toggleEliminated function that toggles the class eliminated on the element that gets clicked.
Test in the browser that clicking on the card toggles the opacity of the card.
Copy the same click event to all 20 cards.


Commit to git


GW Part 10
In this section we're going to randomize the Mystery Card character when the HTML page loads.

For JS to select a random card it needs 2 things: a list of cards to pick from and a function that picks a random card from that list.

Data
In your JS file, create an array cards.
The array will contain 20 elements, each element in the array will be an object, and each object should have a property name and a property image, like so:
{
  name: 'Sakura',
  image: 'characters_01.jpg'
}
Make sure you have all 20 characters in the array.

Random Function
Create a selectRandomCard function that returns a RANDOM integer number (without decimals) between 0 and 19, such as 0, 5 or 16.
Then, use number to select the corresponding card by index from the array of cards.
Within the function, target the HTML element with the mystery-img class (this should be the img tag of the Mystery Card) and 
set its source attribute to the image value of the randomly selected card. 
You will need to compose the full path to the image to include images/, such as images/charachters_01.jpg and not just 'characters_01.jpg'.
Do the same with the mystery-name span tag and replace its content with the name value of the randomly selected card.
Finally call the function in your JS file and test in the browser that every time you refresh the page a new random Mystery Card is selected.
Congratulations! Your "Guess Who?" game is complete. You can now play with your friends.

It's super exciting, but don't forget to commit and push.

Advanced
If you managed to get this far, try the following.

We're now going to replace any hardcoded content in the HTML and inject data directly from JS. By doing this, we're making our game more flexible, the data (name of the characters, images and number of characters) could come from a different source (like an API) and we could produce different versions of the game without having to change or duplicate our code.

Remove all cards from the HTML, keeping only the empty wrapper <div class="cards"><div>
In your JS, create a function populateCards that:
a. targets the .cards element
b. loops through the array of cards and for each cards injects the HTML corresponding to 1 card into the .cards element, replacing the image and name values.
The HTML to inject 20 times is the following:

<div class="card">
  <img src="images/characters_01.jpg" />
  <span>Sakura</span>
</div>
however, you need to replace the srouce of the image and the name of the character using the array, the loop and the index.

Test in the browser that if you change the name or image of any of the characters in the array of cards, these will appear on the page.